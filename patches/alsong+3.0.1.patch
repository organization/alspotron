diff --git a/node_modules/alsong/src/resolvers/index.js b/node_modules/alsong/src/resolvers/index.js
index 44703f1..5bec587 100644
--- a/node_modules/alsong/src/resolvers/index.js
+++ b/node_modules/alsong/src/resolvers/index.js
@@ -1,7 +1,7 @@
-const AlsongV1 = require('./v1');
+// const AlsongV1 = require('./v1');
 const AlsongV2 = require('./v2');
 
 module.exports = {
-	v1: AlsongV1,
+	// v1: AlsongV1,
 	v2: AlsongV2
 };
diff --git a/node_modules/alsong/src/resolvers/v2/index.js b/node_modules/alsong/src/resolvers/v2/index.js
index 3762f9b..130796e 100644
--- a/node_modules/alsong/src/resolvers/v2/index.js
+++ b/node_modules/alsong/src/resolvers/v2/index.js
@@ -1,40 +1,27 @@
-const axios = require('axios');
+const forge = require('node-forge');
+
+const rsa = forge.pki.rsa;
+const publicKeyFromPem = forge.pki.publicKeyFromPem(
+	`-----BEGIN PUBLIC KEY-----
+MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDfvB8/TBDhfgES1y54kW2lBu3V
+faBurGrk8A3TAQZxeAV7qpupTvbmZb+ynO5WfeQIEknAvjdvmBE4PObRK610Si8S
+/BYYnD1uwEEiK0WVQYQWXzfZjRiO1a0Vj/i1AE6OcX9xT8liq36wLVhIGWDU1i8J
+wLZC5JbscD7KHGU3SwIDAQAB
+-----END PUBLIC KEY-----`
+);
 
 const AlsongResolver = require('../AlsongResolver');
 const AlsongV2Converter = require('./converter');
-const NodeRSA = require('node-rsa');
-
-const encKey = new NodeRSA();
-encKey.setOptions({
-	encryptionScheme: 'pkcs1'
-});
-
-encKey.importKey({
-	n: Buffer.from(
-		(
-			'dfbc1f3f4c10e17e0112d72e78916da506edd57da06eac6ae4f00dd301067178' +
-			'057baa9ba94ef6e665bfb29cee567de4081249c0be376f9811383ce6d12bad74' +
-			'4a2f12fc16189c3d6ec041222b45954184165f37d98d188ed5ad158ff8b5004e' +
-			'8e717f714fc962ab7eb02d58481960d4d62f09c0b642e496ec703eca1c65374b'
-		),
-		'hex'
-	),
-	e: 65537
-}, 'components-public');
+
+const baseApiUrl = 'https://lyric.altools.com';
+const headers = {
+	'Accept-Charset': 'utf-8',
+	'Content-Type': 'application/x-www-form-urlencoded',
+	'User-Agent': 'android'
+};
 
 const AlsongV2 = {
 	...AlsongResolver,
-	encKey,
-		
-	api: axios.create({
-		baseURL: 'https://lyric.altools.com',
-		headers: {
-			'Accept-Charset': 'utf-8',
-			'Connection': 'close',
-			'Content-Type': 'application/x-www-form-urlencoded'
-		},
-		responseType: 'json'
-	}),
 
 	converter: AlsongV2Converter,
 
@@ -49,10 +36,10 @@ const AlsongV2 = {
 			const timeStr =
 				`${pad2(date.getUTCHours())}${pad2(date.getUTCMinutes())}${pad2(date.getUTCSeconds())}`;
 
-			return Buffer.from(`ALSONG_ANDROID_${dateStr}_${timeStr}`, 'utf8');
+			return forge.util.createBuffer(`ALSONG_ANDROID_${dateStr}_${timeStr}`, 'utf8').getBytes();
 		})();
 
-		return this.encKey.encrypt(message).toString('hex').toUpperCase();
+		return forge.util.binary.hex.encode(publicKeyFromPem.encrypt(message, 'RSAES-PKCS1-V1_5')).toUpperCase();
 	},
 
 	async _getResembleLyricList(artist, title, option = {}) {
@@ -68,10 +55,17 @@ const AlsongV2 = {
 		params.append('encData', this.getEncData());
 
 		try {
-			const { data } = await this.api.post('/v1/search', params);
-			return data;
+			const response = await fetch(`${baseApiUrl}/v1/search`, {
+				method: 'POST',
+				body: params,
+				headers,
+			});
+			if (response.status === 404) {
+				return null;
+			}
+			return await response.json();
 		} catch(err) {
-			throw new Error("Alsong: Wrong response from server: " + err.message);
+			throw new Error("Alsong: Wrong response from server: " + err);
 		}
 	},
 
@@ -81,14 +75,17 @@ const AlsongV2 = {
 		params.append('encData', this.getEncData());
 
 		try {
-			const { data } = await this.api.post('/v1/info', params);
-			return data;
-		} catch(err) {
-			if (err.response && err.response.status === 404) {
+			const response = await fetch(`${baseApiUrl}/v1/info`, {
+				method: 'POST',
+				body: params,
+				headers,
+			});
+			if (response.status === 404) {
 				return null;
 			}
-			
-			throw new Error("Alsong: Wrong response from server: " + err.message);
+			return await response.json();
+		} catch(err) {
+			throw new Error("Alsong: Wrong response from server: " + err);
 		}
 	},
 
@@ -98,14 +95,17 @@ const AlsongV2 = {
 		params.append('encData', this.getEncData());
 
 		try {
-			const { data } = await this.api.post('/v1/lookup', params);
-			return data;
-		} catch(err) {
-			if (err.response && err.response.status === 404) {
+			const response = await fetch(`${baseApiUrl}/v1/lookup`, {
+				method: 'POST',
+				body: params,
+				headers,
+			});
+			if (response.status === 404) {
 				return null;
 			}
-			
-			throw new Error("Alsong: Wrong response from server: " + err.message);
+			return await response.json();
+		} catch(err) {
+			throw new Error("Alsong: Wrong response from server: " + err);
 		}
 	}
 };
diff --git a/node_modules/alsong/src/utils/LyricUtils.js b/node_modules/alsong/src/utils/LyricUtils.js
index 2a636c6..f46204d 100644
--- a/node_modules/alsong/src/utils/LyricUtils.js
+++ b/node_modules/alsong/src/utils/LyricUtils.js
@@ -1,18 +1,27 @@
 const LyricUtils = {
 	parseLyric(lyric) {
+		/**
+		 * @type Record<number, string[]>
+		 */
 		const lyrics = {};
-		lyric.split('<br>').forEach(v => {
-			const match = v.match(/^\[(\d+):(\d\d).(\d\d)\](.*)$/);
-			if (!match) return;
+		const regex = /\[(\d+):(\d\d).(\d\d)\]([^<]+)/g;
+		let match;
 
-			const timestamp = 10 * (parseInt(match[1]) * 60 * 100 + parseInt(match[2]) * 100 + parseInt(match[3]));
-			if(!lyrics[timestamp]) lyrics[timestamp] = [];
+		while ((match = regex.exec(lyric))) {
+			const minutes = parseInt(match[1]);
+			const seconds = parseInt(match[2]);
+			const milliseconds = parseInt(match[3]);
+			const timestamp = 10 * (minutes * 60 * 100 + seconds * 100 + milliseconds);
+
+			if (!lyrics[timestamp]) {
+				lyrics[timestamp] = [];
+			}
 
 			lyrics[timestamp].push(match[4]);
-		});
+		}
 
 		return lyrics;
-	}
+	},
 };
 
 module.exports = LyricUtils;
\ No newline at end of file
